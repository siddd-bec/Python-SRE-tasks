Tuples in Python
A tuple is an immutable (unchangeable) sequence of elements. Once created, you cannot modify its contents (add, remove, or change elements). Tuples are defined using parentheses ().

Key Characteristics of Tuples:
Immutable: Cannot be modified after creation.

Ordered: Elements maintain their order.

Heterogeneous: Can store elements of different data types.

Indexed: Elements can be accessed using indices.

Common Tuple Operations:
Creating a Tuple:

my_tuple = (1, 2, 3)
Accessing Elements:


print(my_tuple[0])  # Output: 1
Slicing:


print(my_tuple[1:3])  # Output: (2, 3)
Concatenation:

new_tuple = my_tuple + (4, 5)  # (1, 2, 3, 4, 5)
Length:

print(len(my_tuple))  # Output: 3
Count Occurrences:

print(my_tuple.count(2))  # Output: 1
Find Index:

print(my_tuple.index(3))  # Output: 2
Sets in Python

##############################

A set is an unordered collection of unique elements. Sets are defined using curly braces {} or the set() function.

Key Characteristics of Sets:
Unordered: Elements do not maintain any order.

Unique: No duplicate elements are allowed.

Mutable: Can add or remove elements.

Heterogeneous: Can store elements of different data types.

Common Set Operations:
Creating a Set:

my_set = {1, 2, 3}
Adding Elements:

my_set.add(4)  # {1, 2, 3, 4}
Removing Elements:

my_set.remove(2)  # {1, 3, 4}
Union:

set1 = {1, 2, 3}
set2 = {3, 4, 5}
union_set = set1.union(set2)  # {1, 2, 3, 4, 5}

Intersection:
intersection_set = set1.intersection(set2)  # {3}



Difference:
difference_set = set1.difference(set2)  # {1, 2}

Symmetric Difference:
symmetric_diff_set = set1.symmetric_difference(set2)  # {1, 2, 4, 5}
Checking Subset/Superset:

print(set1.issubset(set2))  # False
print(set1.issuperset(set2))  # False

Exercises
Tuple Exercises
Exercise 1: Basic Tuple Operations
Create a tuple my_tuple with elements (10, 20, 30, 40, 50).
Access and print the second element.
Slice the tuple to get elements from index 1 to 3.
Concatenate my_tuple with another tuple (60, 70).
Find the length of the tuple.
Count the number of occurrences of 20 in the tuple.
Find the index of 30 in the tuple.

Exercise 2: Immutable Nature of Tuples
Create a tuple immutable_tuple with elements (1, 2, 3).

Try to change the second element to 5. Observe the error.

Convert the tuple to a list, modify it, and convert it back to a tuple.

Exercise 3: Tuple Packing and Unpacking
Create a tuple packed_tuple with elements (10, 20, 30).

Unpack the tuple into three variables a, b, and c.

Print the values of a, b, and c.

Set Exercises
Exercise 1: Basic Set Operations
Create a set my_set with elements {1, 2, 3, 4, 5}.

Add 6 to the set.

Remove 3 from the set.

Check if 4 is in the set.

Print the length of the set.

Exercise 2: Set Operations
Create two sets set1 = {1, 2, 3} and set2 = {3, 4, 5}.

Find the union of set1 and set2.

Find the intersection of set1 and set2.

Find the difference between set1 and set2.

Find the symmetric difference between set1 and set2.

Exercise 3: Subset and Superset
Create two sets setA = {1, 2, 3} and setB = {1, 2, 3, 4, 5}.

Check if setA is a subset of setB.

Check if setB is a superset of setA.

Solutions
Tuple Solutions
Exercise 1: Basic Tuple Operations
python
Copy
my_tuple = (10, 20, 30, 40, 50)
print(my_tuple[1])  # Output: 20
print(my_tuple[1:4])  # Output: (20, 30, 40)
new_tuple = my_tuple + (60, 70)
print(len(new_tuple))  # Output: 7
print(my_tuple.count(20))  # Output: 1
print(my_tuple.index(30))  # Output: 2
Exercise 2: Immutable Nature of Tuples
python
Copy
immutable_tuple = (1, 2, 3)
# immutable_tuple[1] = 5  # This will raise an error
my_list = list(immutable_tuple)
my_list[1] = 5
new_tuple = tuple(my_list)
print(new_tuple)  # Output: (1, 5, 3)
Exercise 3: Tuple Packing and Unpacking
python
Copy
packed_tuple = (10, 20, 30)
a, b, c = packed_tuple
print(a, b, c)  # Output: 10 20 30
Set Solutions
Exercise 1: Basic Set Operations
python
Copy
my_set = {1, 2, 3, 4, 5}
my_set.add(6)
my_set.remove(3)
print(4 in my_set)  # Output: True
print(len(my_set))  # Output: 5
Exercise 2: Set Operations
python
Copy
set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(set1.union(set2))  # Output: {1, 2, 3, 4, 5}
print(set1.intersection(set2))  # Output: {3}
print(set1.difference(set2))  # Output: {1, 2}
print(set1.symmetric_difference(set2))  # Output: {1, 2, 4, 5}
Exercise 3: Subset and Superset
python
Copy
setA = {1, 2, 3}
setB = {1, 2, 3, 4, 5}
print(setA.issubset(setB))  # Output: True
print(setB.issuperset(setA))  # Output: True
