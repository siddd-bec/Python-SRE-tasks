https://realpython.com/python-modules-packages/

1. Python Modules
A module in Python is a file containing Python code (functions, classes, variables, etc.) that you can reuse in other programs. Modules help organize code into logical units and promote reusability.

How to Use Modules
Use the import statement to include a module in your program.

Example:

python
Copy
import math  # Import the math module
print(math.sqrt(16))  # Use the sqrt function from the math module
You can also import specific functions or variables from a module:

python
Copy
from math import sqrt, pi
print(sqrt(25))
print(pi)
You can rename a module or function using as:

python
Copy
import math as m
print(m.sqrt(36))
2. PIP (Python Package Installer)
pip is the default package manager for Python. It allows you to install, update, and manage third-party libraries and modules.

Common pip Commands
Install a package:

bash
Copy
pip install package_name
Example:

bash
Copy
pip install requests
Uninstall a package:

bash
Copy
pip uninstall package_name
List installed packages:

bash
Copy
pip list
Upgrade a package:

bash
Copy
pip install --upgrade package_name
Search for a package:

bash
Copy
pip search package_name
Save installed packages to a file (for sharing):

bash
Copy
pip freeze > requirements.txt
Install packages from a file:

bash
Copy
pip install -r requirements.txt
3. Common Python Modules
Here are some commonly used Python modules and their purposes:

Standard Library Modules
math: Provides mathematical functions.

python
Copy
import math
print(math.sqrt(25))  # 5.0
os: Interacts with the operating system (e.g., file and directory operations).

python
Copy
import os
print(os.getcwd())  # Get current working directory
sys: Provides access to system-specific parameters and functions.

python
Copy
import sys
print(sys.version)  # Python version
datetime: Handles dates and times.

python
Copy
from datetime import datetime
print(datetime.now())  # Current date and time
random: Generates random numbers and choices.

python
Copy
import random
print(random.randint(1, 10))  # Random integer between 1 and 10
json: Encodes and decodes JSON data.

python
Copy
import json
data = '{"name": "John", "age": 30}'
parsed = json.loads(data)
print(parsed['name'])  # John
re: Provides regular expression support for pattern matching.

python
Copy
import re
match = re.search(r'\d+', 'abc123')
print(match.group())  # 123
collections: Provides specialized container data types (e.g., Counter, defaultdict).

python
Copy
from collections import Counter
count = Counter("hello")
print(count)  # Counter({'l': 2, 'h': 1, 'e': 1, 'o': 1})
itertools: Provides functions for creating iterators for efficient looping.

python
Copy
from itertools import permutations
print(list(permutations('ABC')))  # All permutations of 'ABC'
argparse: Parses command-line arguments.

python
Copy
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("name")
args = parser.parse_args()
print(f"Hello, {args.name}!")
Third-Party Modules
requests: Simplifies making HTTP requests.

python
Copy
import requests
response = requests.get('https://api.github.com')
print(response.status_code)  # 200
numpy: Provides support for arrays and numerical computations.

python
Copy
import numpy as np
arr = np.array([1, 2, 3])
print(arr * 2)  # [2, 4, 6]
pandas: Provides data structures for data analysis (e.g., DataFrames).

python
Copy
import pandas as pd
data = {'Name': ['Alice', 'Bob'], 'Age': [25, 30]}
df = pd.DataFrame(data)
print(df)
matplotlib: Used for creating visualizations and plots.

python
Copy
import matplotlib.pyplot as plt
plt.plot([1, 2, 3], [4, 5, 6])
plt.show()
flask: A lightweight web framework for building web applications.

python
Copy
from flask import Flask
app = Flask(__name__)

@app.route('/')
def home():
    return "Hello, World!"

if __name__ == '__main__':
    app.run()
openpyxl: Reads and writes Excel files.

python
Copy
from openpyxl import Workbook
wb = Workbook()
ws = wb.active
ws['A1'] = "Hello"
wb.save("example.xlsx")
pillow: Image processing library.

python
Copy
from PIL import Image
img = Image.open('example.jpg')
img.show()
sqlite3: Provides a lightweight database.

python
Copy
import sqlite3
conn = sqlite3.connect('example.db')
cursor = conn.cursor()
cursor.execute('CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)')
conn.commit()
4. Creating Your Own Module
You can create your own module by saving a Python file (e.g., mymodule.py) and importing it:

python
Copy
# mymodule.py
def greet(name):
    return f"Hello, {name}!"

# main.py
import mymodule
print(mymodule.greet("Alice"))  # Hello, Alice!
5. Virtual Environments
To manage dependencies for different projects, use virtual environments:

Create a virtual environment:

bash
Copy
python -m venv myenv
Activate it:

On Windows:

bash
Copy
myenv\Scripts\activate
On macOS/Linux:

bash
Copy
source myenv/bin/activate
Deactivate it:

bash
Copy
deactivate
Let me know if you'd like to explore any of these topics in more detail! ðŸ˜Š

can you teach me common modules for SRE tasks automation and exercises for them
Absolutely! Site Reliability Engineering (SRE) involves automating tasks to ensure systems are reliable, scalable, and efficient. Python is a great language for SRE automation, and there are several modules that are particularly useful for SRE tasks. Below, I'll cover common Python modules for SRE automation, along with exercises to help you practice.

Common Python Modules for SRE Tasks
1. os and sys
Purpose: Interact with the operating system and system-specific parameters.

Use Cases:

File and directory operations.

Environment variable management.

Command-line argument parsing.

Example:

python
Copy
import os
print(os.getenv('HOME'))  # Get the home directory
2. subprocess
Purpose: Run shell commands from Python.

Use Cases:

Automating shell scripts.

Running system commands (e.g., ping, curl).

Example:

python
Copy
import subprocess
result = subprocess.run(['ls', '-l'], capture_output=True, text=True)
print(result.stdout)
3. shutil
Purpose: High-level file operations (e.g., copying, moving, deleting files).

Use Cases:

Backup and restore operations.

Log file management.

Example:

python
Copy
import shutil
shutil.copy('source.txt', 'destination.txt')
4. paramiko
Purpose: SSH and SFTP for remote server management.

Use Cases:

Automating remote server tasks.

File transfers over SSH.

Example:

python
Copy
import paramiko
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect('hostname', username='user', password='pass')
stdin, stdout, stderr = ssh.exec_command('ls')
print(stdout.read().decode())
ssh.close()
5. requests
Purpose: HTTP requests for interacting with APIs.

Use Cases:

Monitoring REST APIs.

Automating web-based tasks.

Example:

python
Copy
import requests
response = requests.get('https://api.github.com')
print(response.status_code)
6. logging
Purpose: Logging for debugging and monitoring.

Use Cases:

Logging system events.

Debugging automation scripts.

Example:

python
Copy
import logging
logging.basicConfig(filename='app.log', level=logging.INFO)
logging.info('This is a log message')
7. time and datetime
Purpose: Time-related operations.

Use Cases:

Scheduling tasks.

Measuring execution time.

Example:

python
Copy
import time
time.sleep(5)  # Pause for 5 seconds
8. socket
Purpose: Network communication.

Use Cases:

Checking if a port is open.

Building custom network tools.

Example:

python
Copy
import socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
result = sock.connect_ex(('127.0.0.1', 80))
if result == 0:
    print("Port is open")
else:
    print("Port is closed")
9. psutil
Purpose: System monitoring (CPU, memory, disk, network).

Use Cases:

Monitoring system resources.

Automating health checks.

Example:

python
Copy
import psutil
print(psutil.cpu_percent())  # CPU usage
print(psutil.virtual_memory())  # Memory usage
10. fabric
Purpose: Automating remote deployment and system administration tasks.

Use Cases:

Deploying applications.

Running commands on multiple servers.

Example:

python
Copy
from fabric import Connection
result = Connection('hostname').run('ls')
print(result.stdout)
11. yaml
Purpose: Parsing and generating YAML files.

Use Cases:

Reading configuration files.

Generating Kubernetes manifests.

Example:

python
Copy
import yaml
with open('config.yaml') as file:
    config = yaml.safe_load(file)
print(config)
12. json
Purpose: Parsing and generating JSON data.

Use Cases:

Working with APIs.

Reading/writing configuration files.

Example:

python
Copy
import json
data = '{"name": "John", "age": 30}'
parsed = json.loads(data)
print(parsed['name'])
13. pandas
Purpose: Data analysis and manipulation.

Use Cases:

Analyzing logs.

Generating reports.

Example:

python
Copy
import pandas as pd
df = pd.read_csv('logs.csv')
print(df.head())
Exercises for SRE Automation
Exercise 1: Automate Log File Cleanup
Write a script that deletes log files older than 7 days.

Use the os and datetime modules.

Exercise 2: Monitor Disk Usage
Write a script that checks disk usage and sends an alert if usage exceeds 90%.

Use the psutil module.

Exercise 3: Automate Remote Server Commands
Write a script that connects to a remote server via SSH and runs a command (e.g., df -h).

Use the paramiko module.

Exercise 4: Health Check API
Write a script that checks the health of a REST API by sending a GET request and verifying the response status code.

Use the requests module.

Exercise 5: Parse and Analyze Logs
Write a script that reads a log file (e.g., access.log), counts the number of errors, and generates a summary report.

Use the pandas module.

Exercise 6: Schedule a Task
Write a script that runs a task (e.g., backup) every day at a specific time.

Use the time and subprocess modules.

Exercise 7: Generate a Configuration File
Write a script that generates a YAML configuration file for a Kubernetes deployment.

Use the yaml module.

Exercise 8: Monitor Network Ports
Write a script that checks if specific ports (e.g., 80, 443) are open on a server.

Use the socket module.

Exercise 9: Automate File Transfers
Write a script that uploads a file to a remote server using SFTP.

Use the paramiko module.

Exercise 10: Create a Custom Logging System
Write a script that logs system events (e.g., CPU usage, memory usage) to a file.

Use the logging and psutil modules.

Tips for SRE Automation
Start Small: Automate one task at a time.

Use Version Control: Store your scripts in Git for collaboration and versioning.

Test Thoroughly: Always test your scripts in a safe environment before deploying them to production.

Document Your Code: Write clear comments and documentation for your scripts.

Let me know if you'd like to dive deeper into any of these modules or exercises! ðŸ˜Š

can you provide lot more exercises with solutioms
Absolutely! Below is a comprehensive list of exercises for SRE automation, along with solutions for each. These exercises are designed to help you practice using Python modules commonly used in SRE tasks.

Exercises and Solutions
Exercise 1: Automate Log File Cleanup
Task: Write a script that deletes log files older than 7 days in a specified directory.

Solution:

python
Copy
import os
import time

def delete_old_logs(directory, days):
    current_time = time.time()
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        if os.path.isfile(file_path):
            file_age = current_time - os.path.getmtime(file_path)
            if file_age > days * 86400:  # Convert days to seconds
                os.remove(file_path)
                print(f"Deleted {file_path}")

# Usage
delete_old_logs('/var/logs', 7)
Exercise 2: Monitor Disk Usage
Task: Write a script that checks disk usage and sends an alert if usage exceeds 90%.

Solution:

python
Copy
import psutil
import smtplib
from email.mime.text import MIMEText

def check_disk_usage(threshold):
    usage = psutil.disk_usage('/')
    if usage.percent > threshold:
        send_alert(f"Disk usage is at {usage.percent}%")

def send_alert(message):
    sender = "admin@example.com"
    receiver = "sre@example.com"
    msg = MIMEText(message)
    msg['Subject'] = 'Disk Usage Alert'
    msg['From'] = sender
    msg['To'] = receiver

    with smtplib.SMTP('smtp.example.com') as server:
        server.sendmail(sender, receiver, msg.as_string())

# Usage
check_disk_usage(90)
Exercise 3: Automate Remote Server Commands
Task: Write a script that connects to a remote server via SSH and runs a command (e.g., df -h).

Solution:

python
Copy
import paramiko

def run_remote_command(hostname, username, password, command):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(hostname, username=username, password=password)
    stdin, stdout, stderr = ssh.exec_command(command)
    print(stdout.read().decode())
    ssh.close()

# Usage
run_remote_command('example.com', 'user', 'password', 'df -h')
Exercise 4: Health Check API
Task: Write a script that checks the health of a REST API by sending a GET request and verifying the response status code.

Solution:

python
Copy
import requests

def check_api_health(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print("API is healthy")
        else:
            print(f"API returned status code {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")

# Usage
check_api_health('https://api.example.com/health')
Exercise 5: Parse and Analyze Logs
Task: Write a script that reads a log file (e.g., access.log), counts the number of errors, and generates a summary report.

Solution:

python
Copy
import pandas as pd

def analyze_logs(log_file):
    logs = pd.read_csv(log_file, sep=' ', header=None, names=['IP', 'Date', 'Request', 'Status', 'Size'])
    error_logs = logs[logs['Status'].str.startswith('5')]
    print(f"Total errors: {len(error_logs)}")
    print(error_logs.head())

# Usage
analyze_logs('access.log')
Exercise 6: Schedule a Task
Task: Write a script that runs a task (e.g., backup) every day at a specific time.

Solution:

python
Copy
import time
import subprocess
from datetime import datetime

def schedule_task(task, hour, minute):
    while True:
        now = datetime.now()
        if now.hour == hour and now.minute == minute:
            subprocess.run(task, shell=True)
            print(f"Task executed at {now}")
        time.sleep(60)  # Check every minute

# Usage
schedule_task('tar -czf backup.tar.gz /var/logs', 2, 30)  # Run at 2:30 AM
Exercise 7: Generate a Configuration File
Task: Write a script that generates a YAML configuration file for a Kubernetes deployment.

Solution:

python
Copy
import yaml

def generate_k8s_config(name, image, replicas):
    config = {
        'apiVersion': 'apps/v1',
        'kind': 'Deployment',
        'metadata': {'name': name},
        'spec': {
            'replicas': replicas,
            'template': {
                'spec': {
                    'containers': [{'name': name, 'image': image}]
                }
            }
        }
    }
    with open('deployment.yaml', 'w') as file:
        yaml.dump(config, file)

# Usage
generate_k8s_config('my-app', 'my-app:1.0', 3)
Exercise 8: Monitor Network Ports
Task: Write a script that checks if specific ports (e.g., 80, 443) are open on a server.

Solution:

python
Copy
import socket

def check_ports(host, ports):
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((host, port))
        if result == 0:
            print(f"Port {port} is open")
        else:
            print(f"Port {port} is closed")
        sock.close()

# Usage
check_ports('example.com', [80, 443])
Exercise 9: Automate File Transfers
Task: Write a script that uploads a file to a remote server using SFTP.

Solution:

python
Copy
import paramiko

def upload_file_sftp(hostname, username, password, local_file, remote_file):
    transport = paramiko.Transport((hostname, 22))
    transport.connect(username=username, password=password)
    sftp = paramiko.SFTPClient.from_transport(transport)
    sftp.put(local_file, remote_file)
    sftp.close()
    transport.close()

# Usage
upload_file_sftp('example.com', 'user', 'password', 'local.txt', '/remote/path/remote.txt')
Exercise 10: Create a Custom Logging System
Task: Write a script that logs system events (e.g., CPU usage, memory usage) to a file.

Solution:

python
Copy
import logging
import psutil
import time

def setup_logging():
    logging.basicConfig(filename='system_monitor.log', level=logging.INFO,
                        format='%(asctime)s - %(message)s')

def log_system_stats():
    setup_logging()
    while True:
        cpu_usage = psutil.cpu_percent()
        memory_usage = psutil.virtual_memory().percent
        logging.info(f"CPU Usage: {cpu_usage}%, Memory Usage: {memory_usage}%")
        time.sleep(60)  # Log every minute

# Usage
log_system_stats()
Exercise 11: Automate Database Backups
Task: Write a script that backs up a MySQL database and saves it to a file.

Solution:

python
Copy
import subprocess
import datetime

def backup_mysql_database(db_name, user, password, output_file):
    timestamp = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
    command = f"mysqldump -u {user} -p{password} {db_name} > {output_file}_{timestamp}.sql"
    subprocess.run(command, shell=True)

# Usage
backup_mysql_database('my_database', 'root', 'password', 'backup')
Exercise 12: Monitor Website Uptime
Task: Write a script that monitors a website's uptime and sends an alert if it's down.

Solution:

python
Copy
import requests
import time

def monitor_website(url, interval):
    while True:
        try:
            response = requests.get(url)
            if response.status_code != 200:
                print(f"Website is down! Status code: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")
        time.sleep(interval)

# Usage
monitor_website('https://example.com', 300)  # Check every 5 minutes
